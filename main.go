package main

import (
	"encoding/base64"
	"fmt"
	"log"
	"io"
	"os/exec"
	"strings"
	"time"

	"github.com/getlantern/systray"
)

type icon struct {
	Base64  string
	Decoded []byte
}
type menuItem struct {
	mac       string
	name      string
	menuItem  *systray.MenuItem
	connected bool
}

var (
	icons = map[string]icon{
		"blue": {
			Base64: "iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAA0GVYSWZJSSoACAAAAAoAAAEEAAEAAAAQAAAAAQEEAAEAAAAQAAAAAgEDAAMAAACGAAAAEgEDAAEAAAABAAAAGgEFAAEAAACMAAAAGwEFAAEAAACUAAAAKAEDAAEAAAADAAAAMQECAA0AAACcAAAAMgECABQAAACqAAAAaYcEAAEAAAC+AAAAAAAAAAgACAAIADsAAAAyAAAAOwAAADIAAABHSU1QIDIuMTAuMzYAADIwMjQ6MDM6MDUgMjE6MjE6NDMAAQABoAMAAQAAAAEAAAAAAAAA08bp9QAAAYRpQ0NQSUNDIHByb2ZpbGUAAHicfZE9SMNAHMVfU0tFqoIWEXHIUJ3soiKOtQpFqBBqhVYdTC79giYNSYqLo+BacPBjserg4qyrg6sgCH6AODs4KbpIif9LCi1iPTjux7t7j7t3gFAvM83qigGabpupRFzMZFfF4Cv8CGAAfRiSmWXMSVISHcfXPXx8vYvyrM7n/hy9as5igE8kjjHDtIk3iGc2bYPzPnGYFWWV+Jx4wqQLEj9yXfH4jXPBZYFnhs10ap44TCwW2lhpY1Y0NeJp4oiq6ZQvZDxWOW9x1spV1rwnf2Eop68sc53mKBJYxBIkiFBQRQll2IjSqpNiIUX78Q7+EdcvkUshVwmMHAuoQIPs+sH/4He3Vn5q0ksKxYHAi+N8jAHBXaBRc5zvY8dpnAD+Z+BKb/krdWD2k/RaS4scAf3bwMV1S1P2gMsdYPjJkE3Zlfw0hXweeD+jb8oCg7dAz5rXW3Mfpw9AmrpK3gAHh8B4gbLXO7y7u723f880+/sBOItyjyWQevcAAA14aVRYdFhNTDpjb20uYWRvYmUueG1wAAAAAAA8P3hwYWNrZXQgYmVnaW49Iu+7vyIgaWQ9Ilc1TTBNcENlaGlIenJlU3pOVGN6a2M5ZCI/Pgo8eDp4bXBtZXRhIHhtbG5zOng9ImFkb2JlOm5zOm1ldGEvIiB4OnhtcHRrPSJYTVAgQ29yZSA0LjQuMC1FeGl2MiI+CiA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPgogIDxyZGY6RGVzY3JpcHRpb24gcmRmOmFib3V0PSIiCiAgICB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIKICAgIHhtbG5zOnN0RXZ0PSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VFdmVudCMiCiAgICB4bWxuczpHSU1QPSJodHRwOi8vd3d3LmdpbXAub3JnL3htcC8iCiAgICB4bWxuczpkYz0iaHR0cDovL3B1cmwub3JnL2RjL2VsZW1lbnRzLzEuMS8iCiAgICB4bWxuczp0aWZmPSJodHRwOi8vbnMuYWRvYmUuY29tL3RpZmYvMS4wLyIKICAgIHhtbG5zOnhtcD0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wLyIKICAgeG1wTU06RG9jdW1lbnRJRD0iZ2ltcDpkb2NpZDpnaW1wOmMzNDc2YzRkLTE4MzctNGE3NC1hMWVhLWQzN2VmMWI4MDZhOSIKICAgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDozNmExNzNjOC1hM2RmLTQ1MGEtODk0ZC1jNzY2NTMxZGRjMTUiCiAgIHhtcE1NOk9yaWdpbmFsRG9jdW1lbnRJRD0ieG1wLmRpZDpjYzk2MDMxZS1mMGY3LTQ1OGQtYjc4Zi03ODY2YTE4MWNhZTAiCiAgIEdJTVA6QVBJPSIyLjAiCiAgIEdJTVA6UGxhdGZvcm09IkxpbnV4IgogICBHSU1QOlRpbWVTdGFtcD0iMTcwOTY2MjkwNDYxMDc1MSIKICAgR0lNUDpWZXJzaW9uPSIyLjEwLjM2IgogICBkYzpGb3JtYXQ9ImltYWdlL3BuZyIKICAgdGlmZjpPcmllbnRhdGlvbj0iMSIKICAgeG1wOkNyZWF0b3JUb29sPSJHSU1QIDIuMTAiCiAgIHhtcDpNZXRhZGF0YURhdGU9IjIwMjQ6MDM6MDVUMjE6MjE6NDMrMDM6MDAiCiAgIHhtcDpNb2RpZnlEYXRlPSIyMDI0OjAzOjA1VDIxOjIxOjQzKzAzOjAwIj4KICAgPHhtcE1NOkhpc3Rvcnk+CiAgICA8cmRmOlNlcT4KICAgICA8cmRmOmxpCiAgICAgIHN0RXZ0OmFjdGlvbj0ic2F2ZWQiCiAgICAgIHN0RXZ0OmNoYW5nZWQ9Ii8iCiAgICAgIHN0RXZ0Omluc3RhbmNlSUQ9InhtcC5paWQ6MTMxOTRkMzUtYThmZC00ZDJiLTk1NDktMWVjMzIxOWUzODExIgogICAgICBzdEV2dDpzb2Z0d2FyZUFnZW50PSJHaW1wIDIuMTAgKExpbnV4KSIKICAgICAgc3RFdnQ6d2hlbj0iMjAyNC0wMy0wNVQyMToyMTo0NCswMzowMCIvPgogICAgPC9yZGY6U2VxPgogICA8L3htcE1NOkhpc3Rvcnk+CiAgPC9yZGY6RGVzY3JpcHRpb24+CiA8L3JkZjpSREY+CjwveDp4bXBtZXRhPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgCjw/eHBhY2tldCBlbmQ9InciPz62LLcRAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAB2AAAAdgFOeyYIAAAAB3RJTUUH6AMFEhUsXHJERAAAAgZJREFUOMt1k09Ik2Ecxz/Ps3d/cnPmFMoOVmAprWHZdSBWg7pEFHSUmpLMTokE3cbuZQjCiGkddgsEL2oqdOlYDcaUboVeOrjXckO21+19Orzb2t7m9/Tw/f2e7/N7vnx/AhtCCT0kTTUJ3AIu1OifArZMRCobD+Sa+0X9MDCv3D49P6cQU4CkPaogkhW6Z7bjwqDeODCv3F79YE0hYs2Xo2EPZ7tatBygnmnoa8G4cjUEvHr+Dagx+3MPRjykJ/1cPuOwl25qHLwCkKGEHgLxtF652OvA72n8jPWcwdtxPyP9mk1DxYYT+aCsGdaYc2zIybuon16fRa1mDZa/lXlx12ufwoHJhAbcbmaXPpfoOiVJPe7E5xaMDjqJBF1MpwvtTI1IoN/Ozm0esZIpc7pDcP+6m+l0gT292k7gvARUu4rbafngkODROAlKAnt29nmkgztXXfw+UqznDJLjnVw511ZlVwrYbGaiYQ/hS04m3xcolhWrWYOVjMHrR752AhvSRKSshFn49P2YJ0uH7BdNAEYHndy75uLlcvG/VEpYlFa2RbLO/tivclj6Z8vDG5aJmd2KXWAhE+/Z0QAqdM9o6EO1BWrgw5cSH7cNfv0xW52DLWdfYLZlmYJx5bLiqWJW5k9aJha0vsDs1ylx3CJQx3AiH8RkAog0rzOwIWExE+/Zae7/C5q7pEi3hsKCAAAAAElFTkSuQmCC",
		},
		"red": {
			Base64: "iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAA0GVYSWZJSSoACAAAAAoAAAEEAAEAAAAQAAAAAQEEAAEAAAAQAAAAAgEDAAMAAACGAAAAEgEDAAEAAAABAAAAGgEFAAEAAACMAAAAGwEFAAEAAACUAAAAKAEDAAEAAAADAAAAMQECAA0AAACcAAAAMgECABQAAACqAAAAaYcEAAEAAAC+AAAAAAAAAAgACAAIADsAAAAyAAAAOwAAADIAAABHSU1QIDIuMTAuMzYAADIwMjQ6MDM6MDUgMjE6MjM6NDAAAQABoAMAAQAAAAEAAAAAAAAAkfl31gAAAYRpQ0NQSUNDIHByb2ZpbGUAAHicfZE9SMNAHMVfU0tFqoIWEXHIUJ3soiKOtQpFqBBqhVYdTC79giYNSYqLo+BacPBjserg4qyrg6sgCH6AODs4KbpIif9LCi1iPTjux7t7j7t3gFAvM83qigGabpupRFzMZFfF4Cv8CGAAfRiSmWXMSVISHcfXPXx8vYvyrM7n/hy9as5igE8kjjHDtIk3iGc2bYPzPnGYFWWV+Jx4wqQLEj9yXfH4jXPBZYFnhs10ap44TCwW2lhpY1Y0NeJp4oiq6ZQvZDxWOW9x1spV1rwnf2Eop68sc53mKBJYxBIkiFBQRQll2IjSqpNiIUX78Q7+EdcvkUshVwmMHAuoQIPs+sH/4He3Vn5q0ksKxYHAi+N8jAHBXaBRc5zvY8dpnAD+Z+BKb/krdWD2k/RaS4scAf3bwMV1S1P2gMsdYPjJkE3Zlfw0hXweeD+jb8oCg7dAz5rXW3Mfpw9AmrpK3gAHh8B4gbLXO7y7u723f880+/sBOItyjyWQevcAAA14aVRYdFhNTDpjb20uYWRvYmUueG1wAAAAAAA8P3hwYWNrZXQgYmVnaW49Iu+7vyIgaWQ9Ilc1TTBNcENlaGlIenJlU3pOVGN6a2M5ZCI/Pgo8eDp4bXBtZXRhIHhtbG5zOng9ImFkb2JlOm5zOm1ldGEvIiB4OnhtcHRrPSJYTVAgQ29yZSA0LjQuMC1FeGl2MiI+CiA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPgogIDxyZGY6RGVzY3JpcHRpb24gcmRmOmFib3V0PSIiCiAgICB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIKICAgIHhtbG5zOnN0RXZ0PSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VFdmVudCMiCiAgICB4bWxuczpHSU1QPSJodHRwOi8vd3d3LmdpbXAub3JnL3htcC8iCiAgICB4bWxuczpkYz0iaHR0cDovL3B1cmwub3JnL2RjL2VsZW1lbnRzLzEuMS8iCiAgICB4bWxuczp0aWZmPSJodHRwOi8vbnMuYWRvYmUuY29tL3RpZmYvMS4wLyIKICAgIHhtbG5zOnhtcD0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wLyIKICAgeG1wTU06RG9jdW1lbnRJRD0iZ2ltcDpkb2NpZDpnaW1wOmVkYzBkMzcyLThiMTQtNDI2Zi05YTk2LTNiNmNkOTg1NDNmNyIKICAgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDo0OWQyNTlmOC1jMzQ3LTRiMjEtYTE4OC04MjRiNGRhNzU2NjciCiAgIHhtcE1NOk9yaWdpbmFsRG9jdW1lbnRJRD0ieG1wLmRpZDo3ODdmOWU0MS04ZTkzLTRjYTctYWEwNi0wMDNjM2Q2OGZlNTIiCiAgIEdJTVA6QVBJPSIyLjAiCiAgIEdJTVA6UGxhdGZvcm09IkxpbnV4IgogICBHSU1QOlRpbWVTdGFtcD0iMTcwOTY2MzAyMjI2OTgwNyIKICAgR0lNUDpWZXJzaW9uPSIyLjEwLjM2IgogICBkYzpGb3JtYXQ9ImltYWdlL3BuZyIKICAgdGlmZjpPcmllbnRhdGlvbj0iMSIKICAgeG1wOkNyZWF0b3JUb29sPSJHSU1QIDIuMTAiCiAgIHhtcDpNZXRhZGF0YURhdGU9IjIwMjQ6MDM6MDVUMjE6MjM6NDArMDM6MDAiCiAgIHhtcDpNb2RpZnlEYXRlPSIyMDI0OjAzOjA1VDIxOjIzOjQwKzAzOjAwIj4KICAgPHhtcE1NOkhpc3Rvcnk+CiAgICA8cmRmOlNlcT4KICAgICA8cmRmOmxpCiAgICAgIHN0RXZ0OmFjdGlvbj0ic2F2ZWQiCiAgICAgIHN0RXZ0OmNoYW5nZWQ9Ii8iCiAgICAgIHN0RXZ0Omluc3RhbmNlSUQ9InhtcC5paWQ6NmVmYWEyNzUtODk1Zi00NDFiLWE1MGUtMmQzOGI2YTdkNzhkIgogICAgICBzdEV2dDpzb2Z0d2FyZUFnZW50PSJHaW1wIDIuMTAgKExpbnV4KSIKICAgICAgc3RFdnQ6d2hlbj0iMjAyNC0wMy0wNVQyMToyMzo0MiswMzowMCIvPgogICAgPC9yZGY6U2VxPgogICA8L3htcE1NOkhpc3Rvcnk+CiAgPC9yZGY6RGVzY3JpcHRpb24+CiA8L3JkZjpSREY+CjwveDp4bXBtZXRhPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgCjw/eHBhY2tldCBlbmQ9InciPz5iuawSAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAB2AAAAdgFOeyYIAAAAB3RJTUUH6AMFEhcqhyeD8wAAAiZJREFUOMt1k09I02Ecxj/v6/7Ips7KClmYsBGR2CVEsFqmMyLpMD1IXjoomRQRIo2gy0oIoqEMpB300KVbDgMZ6rQWu3TolNhFIcw/FVZONwmnv7fD/jR/ruf08nyf93m/7/d9H4EOiy5PrZKqG2gGqjP0FwQRoakRR3R8Ll8vsgtnQJnDIc+gUPQAksLYExC0aam+ivcTO2SFzoAyT455wkLRm7+5vLMdw7GKfIMiBXc2pDG87mo15QzCY54hBZf1x9la3dhfPMPkqNaXmuLS6AeQiy5PrYBb2Yqp6gSy1JpTJmdi2P0+is+e2eegoHehsa1GZgaWa9tyoR574CmGw4cASESibE5Mc/Rut76LItC6DIA7n9149ZqishIqhwaQVguWhjpKLp1n1esrNNQWCVTp2Z/Bl2yFI0hbGaXX3Kx6faRWvhUyOCnT1zkIaTJnGpUIs/k/r4qSwFc9e+T2TazNF9HimyRnYlQ+91F8ylHIYEkimM5nyjvbsdSfY+3+I7TkNolIlEQ4wvEn3kIGU1JoagTYyzLbsQ+s3HvI7q/f6VdpqKPkahPfBwYP/EqkGJWO6PicgGCW3VlaRttK5lSl16+w9uAxfz591hsMO2dD8wYAm5bq25DG05kA5RB/M0nibYzdH+u60RHp6Az18078C9O6q9UUl0a/gt70JykcJmC440ao/2OPSO1LYxYLjW01oHUBLfviDFNIMeqcDc3n6/8CdCyq8fpPGr4AAAAASUVORK5CYII=",
		},
		"green": {
			Base64: "iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAA0GVYSWZJSSoACAAAAAoAAAEEAAEAAAAQAAAAAQEEAAEAAAAQAAAAAgEDAAMAAACGAAAAEgEDAAEAAAABAAAAGgEFAAEAAACMAAAAGwEFAAEAAACUAAAAKAEDAAEAAAADAAAAMQECAA0AAACcAAAAMgECABQAAACqAAAAaYcEAAEAAAC+AAAAAAAAAAgACAAIADsAAAAyAAAAOwAAADIAAABHSU1QIDIuMTAuMzYAADIwMjQ6MDM6MDUgMjE6MjI6NDQAAQABoAMAAQAAAAEAAAAAAAAARGd2WwAAAYRpQ0NQSUNDIHByb2ZpbGUAAHicfZE9SMNAHMVfU0tFqoIWEXHIUJ3soiKOtQpFqBBqhVYdTC79giYNSYqLo+BacPBjserg4qyrg6sgCH6AODs4KbpIif9LCi1iPTjux7t7j7t3gFAvM83qigGabpupRFzMZFfF4Cv8CGAAfRiSmWXMSVISHcfXPXx8vYvyrM7n/hy9as5igE8kjjHDtIk3iGc2bYPzPnGYFWWV+Jx4wqQLEj9yXfH4jXPBZYFnhs10ap44TCwW2lhpY1Y0NeJp4oiq6ZQvZDxWOW9x1spV1rwnf2Eop68sc53mKBJYxBIkiFBQRQll2IjSqpNiIUX78Q7+EdcvkUshVwmMHAuoQIPs+sH/4He3Vn5q0ksKxYHAi+N8jAHBXaBRc5zvY8dpnAD+Z+BKb/krdWD2k/RaS4scAf3bwMV1S1P2gMsdYPjJkE3Zlfw0hXweeD+jb8oCg7dAz5rXW3Mfpw9AmrpK3gAHh8B4gbLXO7y7u723f880+/sBOItyjyWQevcAAA14aVRYdFhNTDpjb20uYWRvYmUueG1wAAAAAAA8P3hwYWNrZXQgYmVnaW49Iu+7vyIgaWQ9Ilc1TTBNcENlaGlIenJlU3pOVGN6a2M5ZCI/Pgo8eDp4bXBtZXRhIHhtbG5zOng9ImFkb2JlOm5zOm1ldGEvIiB4OnhtcHRrPSJYTVAgQ29yZSA0LjQuMC1FeGl2MiI+CiA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPgogIDxyZGY6RGVzY3JpcHRpb24gcmRmOmFib3V0PSIiCiAgICB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIKICAgIHhtbG5zOnN0RXZ0PSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VFdmVudCMiCiAgICB4bWxuczpHSU1QPSJodHRwOi8vd3d3LmdpbXAub3JnL3htcC8iCiAgICB4bWxuczpkYz0iaHR0cDovL3B1cmwub3JnL2RjL2VsZW1lbnRzLzEuMS8iCiAgICB4bWxuczp0aWZmPSJodHRwOi8vbnMuYWRvYmUuY29tL3RpZmYvMS4wLyIKICAgIHhtbG5zOnhtcD0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wLyIKICAgeG1wTU06RG9jdW1lbnRJRD0iZ2ltcDpkb2NpZDpnaW1wOmI3NzdmY2E1LTFmYTMtNGQ3MC04NjA0LWQyYTdkNWVlMDBjNCIKICAgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDpjOTI0ZjJkZi1iOTAyLTQ2ZTEtODY4Ny0xNzI1NGY3ZGU2YmYiCiAgIHhtcE1NOk9yaWdpbmFsRG9jdW1lbnRJRD0ieG1wLmRpZDo3MzJmZDJkNi1iODdlLTQ3NzUtYTljMi0wMTI5MzMyNTBhZjIiCiAgIEdJTVA6QVBJPSIyLjAiCiAgIEdJTVA6UGxhdGZvcm09IkxpbnV4IgogICBHSU1QOlRpbWVTdGFtcD0iMTcwOTY2Mjk2NjgzOTM3NiIKICAgR0lNUDpWZXJzaW9uPSIyLjEwLjM2IgogICBkYzpGb3JtYXQ9ImltYWdlL3BuZyIKICAgdGlmZjpPcmllbnRhdGlvbj0iMSIKICAgeG1wOkNyZWF0b3JUb29sPSJHSU1QIDIuMTAiCiAgIHhtcDpNZXRhZGF0YURhdGU9IjIwMjQ6MDM6MDVUMjE6MjI6NDQrMDM6MDAiCiAgIHhtcDpNb2RpZnlEYXRlPSIyMDI0OjAzOjA1VDIxOjIyOjQ0KzAzOjAwIj4KICAgPHhtcE1NOkhpc3Rvcnk+CiAgICA8cmRmOlNlcT4KICAgICA8cmRmOmxpCiAgICAgIHN0RXZ0OmFjdGlvbj0ic2F2ZWQiCiAgICAgIHN0RXZ0OmNoYW5nZWQ9Ii8iCiAgICAgIHN0RXZ0Omluc3RhbmNlSUQ9InhtcC5paWQ6MzdhYTg3YWQtZjAwNy00YTExLWIyMTAtOGE4NDY2ZTQyN2VhIgogICAgICBzdEV2dDpzb2Z0d2FyZUFnZW50PSJHaW1wIDIuMTAgKExpbnV4KSIKICAgICAgc3RFdnQ6d2hlbj0iMjAyNC0wMy0wNVQyMToyMjo0NiswMzowMCIvPgogICAgPC9yZGY6U2VxPgogICA8L3htcE1NOkhpc3Rvcnk+CiAgPC9yZGY6RGVzY3JpcHRpb24+CiA8L3JkZjpSREY+CjwveDp4bXBtZXRhPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgCjw/eHBhY2tldCBlbmQ9InciPz4dxfqFAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAB2AAAAdgFOeyYIAAAAB3RJTUUH6AMFEhYumVF2qwAAAi5JREFUOMt1k01I02Ecxz/Ps7fybWiK9GYjXAnTsEYIyqgsO3jQg9EhTJRlMqqLjIgoSAKhYhUDQ0hNr11kJ3FplO6g0fAidphFlCFYTlpOq7U9HXRr/l2/08P3932+z+/l+Qo00RBsrhDoLwGnAcsm/FEgxhSJPp99aDadL5KHUq8ylVe3PVKCDkCSOeICelWeodNnffqbJLHUq0zlNW0jSuBKv9xUXE+RoSBdQKfgCpHYSGOo3ZgSsFW3PlZwSvtcXdFJ7pfdxrJzvzZVKyIxD4BsCDZXIMTlZGbfjt3k6LJSzMmVae5ar2PLPrRFQYGrMdhik5sDS5VdZT5K9+Gb5BvMAEyEp/Avv8ZZckFbhQ6kU1fWUekBipLou2iIYmMhF/ecI1eXzVp8HUd+Fd3vvazGo1qRXAmUaNHBL88ZXw6Qq8/hzC4HXfMeFn8tZdrKAbnRzvYwSgMAUkhMwvifraIk8FmLtu49jyO/ih9/VplcmeaO1U1pliWTwCcpEC/Skabieo6Zj3ArdI9oYp2J8BTj4QA3Dl7LJODXKxJ9IK5uTBWmv88w+u0Vq/E1AI6bK6ktqOHBhyfbfqVE9kuffWhWQG8SXfi5mLoMcLbwBF3zD5mLhrQCPcP2gTk9gMozdBKJlW0aKBWjSy8JrLzhayysGV1ibCE45IbBf2ZqDLUbRSTmUeBKtpPJTEDPwttn7mCHiG1xY0oo2GID6QTq0u0M+CWyf9g+MJfO/wvve61F08if6AAAAABJRU5ErkJggg==",
		},
		"yellow": {
			Base64: "iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAA0GVYSWZJSSoACAAAAAoAAAEEAAEAAAAQAAAAAQEEAAEAAAAQAAAAAgEDAAMAAACGAAAAEgEDAAEAAAABAAAAGgEFAAEAAACMAAAAGwEFAAEAAACUAAAAKAEDAAEAAAADAAAAMQECAA0AAACcAAAAMgECABQAAACqAAAAaYcEAAEAAAC+AAAAAAAAAAgACAAIADsAAAAyAAAAOwAAADIAAABHSU1QIDIuMTAuMzYAADIwMjQ6MDM6MDUgMjE6MjQ6MzQAAQABoAMAAQAAAAEAAAAAAAAAwEqCeQAAAYRpQ0NQSUNDIHByb2ZpbGUAAHicfZE9SMNAHMVfU0tFqoIWEXHIUJ3soiKOtQpFqBBqhVYdTC79giYNSYqLo+BacPBjserg4qyrg6sgCH6AODs4KbpIif9LCi1iPTjux7t7j7t3gFAvM83qigGabpupRFzMZFfF4Cv8CGAAfRiSmWXMSVISHcfXPXx8vYvyrM7n/hy9as5igE8kjjHDtIk3iGc2bYPzPnGYFWWV+Jx4wqQLEj9yXfH4jXPBZYFnhs10ap44TCwW2lhpY1Y0NeJp4oiq6ZQvZDxWOW9x1spV1rwnf2Eop68sc53mKBJYxBIkiFBQRQll2IjSqpNiIUX78Q7+EdcvkUshVwmMHAuoQIPs+sH/4He3Vn5q0ksKxYHAi+N8jAHBXaBRc5zvY8dpnAD+Z+BKb/krdWD2k/RaS4scAf3bwMV1S1P2gMsdYPjJkE3Zlfw0hXweeD+jb8oCg7dAz5rXW3Mfpw9AmrpK3gAHh8B4gbLXO7y7u723f880+/sBOItyjyWQevcAAA14aVRYdFhNTDpjb20uYWRvYmUueG1wAAAAAAA8P3hwYWNrZXQgYmVnaW49Iu+7vyIgaWQ9Ilc1TTBNcENlaGlIenJlU3pOVGN6a2M5ZCI/Pgo8eDp4bXBtZXRhIHhtbG5zOng9ImFkb2JlOm5zOm1ldGEvIiB4OnhtcHRrPSJYTVAgQ29yZSA0LjQuMC1FeGl2MiI+CiA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPgogIDxyZGY6RGVzY3JpcHRpb24gcmRmOmFib3V0PSIiCiAgICB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIKICAgIHhtbG5zOnN0RXZ0PSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VFdmVudCMiCiAgICB4bWxuczpHSU1QPSJodHRwOi8vd3d3LmdpbXAub3JnL3htcC8iCiAgICB4bWxuczpkYz0iaHR0cDovL3B1cmwub3JnL2RjL2VsZW1lbnRzLzEuMS8iCiAgICB4bWxuczp0aWZmPSJodHRwOi8vbnMuYWRvYmUuY29tL3RpZmYvMS4wLyIKICAgIHhtbG5zOnhtcD0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wLyIKICAgeG1wTU06RG9jdW1lbnRJRD0iZ2ltcDpkb2NpZDpnaW1wOjgzNjZiMjBhLTdkZWUtNDYzZS04NjhiLTA3ZmNkZWQ2NDM0MCIKICAgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDoxNTcxNzQyNy0yNWMwLTRkNDktYjgzYy1kYWU4M2U2OWRlYjciCiAgIHhtcE1NOk9yaWdpbmFsRG9jdW1lbnRJRD0ieG1wLmRpZDoyMjE0YzU1YS04ZWE0LTRjMWItOWYxZS04ZWViODk4ZTczNGYiCiAgIEdJTVA6QVBJPSIyLjAiCiAgIEdJTVA6UGxhdGZvcm09IkxpbnV4IgogICBHSU1QOlRpbWVTdGFtcD0iMTcwOTY2MzA3NDc5NDY5MyIKICAgR0lNUDpWZXJzaW9uPSIyLjEwLjM2IgogICBkYzpGb3JtYXQ9ImltYWdlL3BuZyIKICAgdGlmZjpPcmllbnRhdGlvbj0iMSIKICAgeG1wOkNyZWF0b3JUb29sPSJHSU1QIDIuMTAiCiAgIHhtcDpNZXRhZGF0YURhdGU9IjIwMjQ6MDM6MDVUMjE6MjQ6MzQrMDM6MDAiCiAgIHhtcDpNb2RpZnlEYXRlPSIyMDI0OjAzOjA1VDIxOjI0OjM0KzAzOjAwIj4KICAgPHhtcE1NOkhpc3Rvcnk+CiAgICA8cmRmOlNlcT4KICAgICA8cmRmOmxpCiAgICAgIHN0RXZ0OmFjdGlvbj0ic2F2ZWQiCiAgICAgIHN0RXZ0OmNoYW5nZWQ9Ii8iCiAgICAgIHN0RXZ0Omluc3RhbmNlSUQ9InhtcC5paWQ6YjUwYjFiZWEtYjhhMC00NDNlLWI5NjQtMGRmOTVkYzY4NGUwIgogICAgICBzdEV2dDpzb2Z0d2FyZUFnZW50PSJHaW1wIDIuMTAgKExpbnV4KSIKICAgICAgc3RFdnQ6d2hlbj0iMjAyNC0wMy0wNVQyMToyNDozNCswMzowMCIvPgogICAgPC9yZGY6U2VxPgogICA8L3htcE1NOkhpc3Rvcnk+CiAgPC9yZGY6RGVzY3JpcHRpb24+CiA8L3JkZjpSREY+CjwveDp4bXBtZXRhPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgCjw/eHBhY2tldCBlbmQ9InciPz6v+g4bAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAB2AAAAdgFOeyYIAAAAB3RJTUUH6AMFEhgiDmQXDgAAAhpJREFUOMt1k8FLk2Ecxz/P887NuU1Xy1aHOQMDcURHq0XQmhARhX+AJwMZdojhpVunbpJIkpCeOnYIAhHWRlAz6RBUimfduqxtOjc3m+59ny7ben2bv9PD9/d9vs/v+T7PV2Cp7Ma1K0rKR8AdYLAJbyNEUihjKRBa3zTzRWsxNK8cqcjNF0KoKUDSuXQhWPT69LjH//WIFnFoXjk+RsOrQqiYebPHN4Fm85sFNKWY3itoq5XcqL0tkIqE55TitvU499kH+C+9pssxZG1FSkVtFkA07/y9JdblCKI3djH0Chcvv+Ww/BmX9y6F7FPqtR8nroPBVdk0rD12t/sW5wdfodl8ANTKCaql95y58MQ6hYZk0gZEzWil+AbN1kt/8CVSunC6wzg9EfKZeCdTxyQwYEVLuQWqpRWk1ofLe598Jk7j6FcngaAEVKeOEI72pEI6TnlVlASyVtTrn6anL4qh71MrJ+kPzGF3DncSyEiE+GBGPL4Jut3Xye88xjCq1MoJauUVzgWedxJISKGMJUBvIX8OPvF7O4beKALgdIfp6b1HMfvsv1+JkMsyEFrfFILFFnpc38HQK22Wy/uQfCZO/fCnVWBhYCS9ZQPw+vT4XkEbbgaoXQe776jtp9AbOYt1Kjm+9mUGxL8wVXKj9lJRm1WKGKCdFiZgYTy9NvNtShyfSGPb1o0bISSTwNiJOEMCIZcHRtJbZv5f9Nm2lC+fkwoAAAAASUVORK5CYII=",
		},
	}
	menuItems = make(map[string]menuItem)
)

func main() {

	// syslog, err := syslog.New(syslog.LOG_INFO, "bluetooth-menu")
	// if err != nil {
	// 	panic("Unable to connect to syslog")
	// }
	log.SetOutput(io.Discard)

	systray.Run(func() {
		systray.SetIcon(getIcon("logo"))
		quit := systray.AddMenuItem("Quit", "")
		go func() {
			for {
				select {
				case <-quit.ClickedCh:
					systray.Quit()
				}
			}
		}()
		systray.AddSeparator()
		addMenuItems()
		tick := time.Tick(30 * time.Second)
		for {
			select {
			case <-tick:
				addMenuItems()
			}
		}
	}, func() {})
}

func addMenuItems() {
	allDevices, err := exec.Command("sh", "-c", "bluetoothctl devices | awk '{printf $2 \"\t\"; for (i=3; i<NF; i++) printf $i \" \"; print $NF}'").Output()
	if err != nil {
		log.Println("all")
		log.Println(err)
		return
	}
	var currentDevices []string
	for _, line := range strings.Split(strings.TrimSpace(string(allDevices)), "\n") {
		parts := strings.Split(line, "\t")
		currentDevices = append(currentDevices, parts[0])
		item, ok := menuItems[parts[0]]
		if !ok {
			newItem := systray.AddMenuItem(parts[1], "")
			go func() {
				for {
					select {
					case <-newItem.ClickedCh:
						if item, ok := menuItems[parts[0]]; ok {
							if item.connected {
								exec.Command("sh", "-c", "bluetoothctl disconnect "+parts[0]).Run()
								item.connected = false
								item.menuItem.SetTitle(fmt.Sprintf("%s: Disconnected", item.name))
							} else {
								exec.Command("sh", "-c", "bluetoothctl connect "+parts[0]).Run()
								item.connected = true
								item.menuItem.SetTitle(fmt.Sprintf("%s: Connected", item.name))
							}
							menuItems[parts[0]] = item
						}
					}
				}
			}()
			item = menuItem{
				mac:      parts[0],
				name:     parts[1],
				menuItem: newItem,
			}
			menuItems[parts[0]] = item
		}
		item.menuItem.Show()
	}
	for mac, item := range menuItems {
		current := false
		for _, currcurrentDevice := range currentDevices {
			if mac == currcurrentDevice {
				current = true
				break
			}
		}
		if !current {
			item.menuItem.Hide()
		}
	}
	connectedDevices, err := exec.Command("sh", "-c", "bluetoothctl devices Connected | awk '{printf $2}'").Output()
	if err != nil {
		log.Println(err)
		return
	}
	connected := strings.Split(strings.TrimSpace(string(connectedDevices)), "\n")
	for mac, item := range menuItems {
		isConnected := false
		status := "Disconnected"
		for _, connectedMac := range connected {
			if mac == connectedMac {
				isConnected = true
				status = "Connected"
				break
			}
		}
		item.connected = isConnected
		item.menuItem.SetTitle(fmt.Sprintf("%s: %s", item.name, status))
		menuItems[mac] = item
	}
}

func decodedIcon(icon string) ([]byte, error) {
	if len(icons[icon].Decoded) < 1 {
		img, err := base64.StdEncoding.DecodeString(icons[icon].Base64)
		if err != nil {
			return []byte(" "), fmt.Errorf("failed to get icon: %s", icon)
		}
		i := icons[icon]
		i.Decoded = img
		icons[icon] = i
	}

	return icons[icon].Decoded, nil
}

func getIcon(icon string) []byte {
	img, err := decodedIcon(icon)
	if err != nil {
		log.Println(err)
	}

	return img
}
